//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Alive"",
            ""id"": ""96c8d673-df58-4ce4-8cd3-8ce6be46501b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""92b12173-f382-43c2-91a8-e6d94787c267"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""bc584be1-8c6c-46d5-a083-fa48e5a4c650"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""4e6df598-f546-4da8-96b6-f3616c6e2ba7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""acddffac-301e-4de9-b038-4e82b1aced43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchGuns"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bd1038e2-2d48-496e-ba0f-76e5c6afce52"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pistol"",
                    ""type"": ""Button"",
                    ""id"": ""f9d7da2b-129e-4350-b5e1-2c9a53227afc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shotgun"",
                    ""type"": ""Button"",
                    ""id"": ""32b4f18c-588d-4c04-83c7-a3a5b6de10ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlashLight"",
                    ""type"": ""Button"",
                    ""id"": ""80a221c7-e323-4536-b5b7-6a4c53d1d1ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlashOff"",
                    ""type"": ""Button"",
                    ""id"": ""fd5a43f6-06e2-4c31-bd4e-9a393fc39880"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""0ee45971-b555-4e9f-a1b4-d72cae0a1d8c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4d48bf05-ca0b-4832-bf15-db3da340dc7f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0fd6ca01-2704-43fa-b5a7-536a51761288"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""deaf17f6-1306-467a-a97b-e31d3bd7754f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bde3bba5-20f0-4dc8-acdd-b92cf37d9956"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aaa2adca-cf1d-436a-8151-89cc10638785"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""beff3309-fd46-41f5-8719-8a478b3bb7eb"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12b85249-2341-4b32-a4ba-3ad4a28f8ef5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9e59de8-3044-493e-a67e-29ccd215cb7d"",
                    ""path"": ""<Mouse>/forwardButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchGuns"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f02deac-9300-41d5-9395-f9696e40aa15"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchGuns"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fef021d-ed60-4688-bf32-b4f03714f8ed"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pistol"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b0865d4-1e4a-41b8-9a93-9c91a24a4285"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shotgun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4fe85e4-b43e-499a-84c4-cbf299297437"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlashLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""523d081b-05d7-441f-9687-ee0b7d8d7481"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlashOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dead"",
            ""id"": ""9df019f0-ed4b-4caa-a336-3ae7742fc151"",
            ""actions"": [
                {
                    ""name"": ""PressButton"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4a1c1bda-a976-45a6-aab4-38ff45f8dbc9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a692d30-a4e7-42b9-b0f8-ecff3372cb4d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Alive
        m_Alive = asset.FindActionMap("Alive", throwIfNotFound: true);
        m_Alive_Movement = m_Alive.FindAction("Movement", throwIfNotFound: true);
        m_Alive_Jump = m_Alive.FindAction("Jump", throwIfNotFound: true);
        m_Alive_Look = m_Alive.FindAction("Look", throwIfNotFound: true);
        m_Alive_Shoot = m_Alive.FindAction("Shoot", throwIfNotFound: true);
        m_Alive_SwitchGuns = m_Alive.FindAction("SwitchGuns", throwIfNotFound: true);
        m_Alive_Pistol = m_Alive.FindAction("Pistol", throwIfNotFound: true);
        m_Alive_Shotgun = m_Alive.FindAction("Shotgun", throwIfNotFound: true);
        m_Alive_FlashLight = m_Alive.FindAction("FlashLight", throwIfNotFound: true);
        m_Alive_FlashOff = m_Alive.FindAction("FlashOff", throwIfNotFound: true);
        // Dead
        m_Dead = asset.FindActionMap("Dead", throwIfNotFound: true);
        m_Dead_PressButton = m_Dead.FindAction("PressButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Alive
    private readonly InputActionMap m_Alive;
    private IAliveActions m_AliveActionsCallbackInterface;
    private readonly InputAction m_Alive_Movement;
    private readonly InputAction m_Alive_Jump;
    private readonly InputAction m_Alive_Look;
    private readonly InputAction m_Alive_Shoot;
    private readonly InputAction m_Alive_SwitchGuns;
    private readonly InputAction m_Alive_Pistol;
    private readonly InputAction m_Alive_Shotgun;
    private readonly InputAction m_Alive_FlashLight;
    private readonly InputAction m_Alive_FlashOff;
    public struct AliveActions
    {
        private @PlayerInput m_Wrapper;
        public AliveActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Alive_Movement;
        public InputAction @Jump => m_Wrapper.m_Alive_Jump;
        public InputAction @Look => m_Wrapper.m_Alive_Look;
        public InputAction @Shoot => m_Wrapper.m_Alive_Shoot;
        public InputAction @SwitchGuns => m_Wrapper.m_Alive_SwitchGuns;
        public InputAction @Pistol => m_Wrapper.m_Alive_Pistol;
        public InputAction @Shotgun => m_Wrapper.m_Alive_Shotgun;
        public InputAction @FlashLight => m_Wrapper.m_Alive_FlashLight;
        public InputAction @FlashOff => m_Wrapper.m_Alive_FlashOff;
        public InputActionMap Get() { return m_Wrapper.m_Alive; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AliveActions set) { return set.Get(); }
        public void SetCallbacks(IAliveActions instance)
        {
            if (m_Wrapper.m_AliveActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_AliveActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_AliveActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_AliveActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_AliveActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_AliveActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_AliveActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_AliveActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_AliveActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_AliveActionsCallbackInterface.OnLook;
                @Shoot.started -= m_Wrapper.m_AliveActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_AliveActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_AliveActionsCallbackInterface.OnShoot;
                @SwitchGuns.started -= m_Wrapper.m_AliveActionsCallbackInterface.OnSwitchGuns;
                @SwitchGuns.performed -= m_Wrapper.m_AliveActionsCallbackInterface.OnSwitchGuns;
                @SwitchGuns.canceled -= m_Wrapper.m_AliveActionsCallbackInterface.OnSwitchGuns;
                @Pistol.started -= m_Wrapper.m_AliveActionsCallbackInterface.OnPistol;
                @Pistol.performed -= m_Wrapper.m_AliveActionsCallbackInterface.OnPistol;
                @Pistol.canceled -= m_Wrapper.m_AliveActionsCallbackInterface.OnPistol;
                @Shotgun.started -= m_Wrapper.m_AliveActionsCallbackInterface.OnShotgun;
                @Shotgun.performed -= m_Wrapper.m_AliveActionsCallbackInterface.OnShotgun;
                @Shotgun.canceled -= m_Wrapper.m_AliveActionsCallbackInterface.OnShotgun;
                @FlashLight.started -= m_Wrapper.m_AliveActionsCallbackInterface.OnFlashLight;
                @FlashLight.performed -= m_Wrapper.m_AliveActionsCallbackInterface.OnFlashLight;
                @FlashLight.canceled -= m_Wrapper.m_AliveActionsCallbackInterface.OnFlashLight;
                @FlashOff.started -= m_Wrapper.m_AliveActionsCallbackInterface.OnFlashOff;
                @FlashOff.performed -= m_Wrapper.m_AliveActionsCallbackInterface.OnFlashOff;
                @FlashOff.canceled -= m_Wrapper.m_AliveActionsCallbackInterface.OnFlashOff;
            }
            m_Wrapper.m_AliveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @SwitchGuns.started += instance.OnSwitchGuns;
                @SwitchGuns.performed += instance.OnSwitchGuns;
                @SwitchGuns.canceled += instance.OnSwitchGuns;
                @Pistol.started += instance.OnPistol;
                @Pistol.performed += instance.OnPistol;
                @Pistol.canceled += instance.OnPistol;
                @Shotgun.started += instance.OnShotgun;
                @Shotgun.performed += instance.OnShotgun;
                @Shotgun.canceled += instance.OnShotgun;
                @FlashLight.started += instance.OnFlashLight;
                @FlashLight.performed += instance.OnFlashLight;
                @FlashLight.canceled += instance.OnFlashLight;
                @FlashOff.started += instance.OnFlashOff;
                @FlashOff.performed += instance.OnFlashOff;
                @FlashOff.canceled += instance.OnFlashOff;
            }
        }
    }
    public AliveActions @Alive => new AliveActions(this);

    // Dead
    private readonly InputActionMap m_Dead;
    private IDeadActions m_DeadActionsCallbackInterface;
    private readonly InputAction m_Dead_PressButton;
    public struct DeadActions
    {
        private @PlayerInput m_Wrapper;
        public DeadActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PressButton => m_Wrapper.m_Dead_PressButton;
        public InputActionMap Get() { return m_Wrapper.m_Dead; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DeadActions set) { return set.Get(); }
        public void SetCallbacks(IDeadActions instance)
        {
            if (m_Wrapper.m_DeadActionsCallbackInterface != null)
            {
                @PressButton.started -= m_Wrapper.m_DeadActionsCallbackInterface.OnPressButton;
                @PressButton.performed -= m_Wrapper.m_DeadActionsCallbackInterface.OnPressButton;
                @PressButton.canceled -= m_Wrapper.m_DeadActionsCallbackInterface.OnPressButton;
            }
            m_Wrapper.m_DeadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PressButton.started += instance.OnPressButton;
                @PressButton.performed += instance.OnPressButton;
                @PressButton.canceled += instance.OnPressButton;
            }
        }
    }
    public DeadActions @Dead => new DeadActions(this);
    public interface IAliveActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnSwitchGuns(InputAction.CallbackContext context);
        void OnPistol(InputAction.CallbackContext context);
        void OnShotgun(InputAction.CallbackContext context);
        void OnFlashLight(InputAction.CallbackContext context);
        void OnFlashOff(InputAction.CallbackContext context);
    }
    public interface IDeadActions
    {
        void OnPressButton(InputAction.CallbackContext context);
    }
}
